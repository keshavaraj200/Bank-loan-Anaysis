# -*- coding: utf-8 -*-
"""Bank loan analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zXKsFv-HOOGfDMp7ac1zXyfLVBV7GAll

# **Bank Loan Analysis Project**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
import plotly.express as px

path= "/content/financial_loan (1).xlsx"
bank= pd.read_excel(path)

bank.head(10)

bank.describe()

bank.shape

bank.isnull().sum()

"""**Total loan application**"""

total_loan_application= bank['id'].count()
print("Total loan application :",total_loan_application)

"""**MID Total loan Application**"""

from time import strftime
latest_issue_date= bank['issue_date'].max()
latest_year= latest_issue_date.year
latest_month= latest_issue_date.month

mid_date= bank[(bank['issue_date'].dt.year == latest_year) & (bank['issue_date'].dt.month == latest_month)]
mid_total_loan_application= mid_date['id'].count()
print(f"MID Total loan Application (for {latest_issue_date.strftime('%B %Y')}): {mid_total_loan_application}")

"""**Total Funded amount**"""

total_funded_amount= bank['loan_amount'].sum()
total_funded_amount_millions= total_funded_amount/1000000
print(f"Total Funded amount : ${total_funded_amount_millions:.2f}M")

"""**MID Total Funded amount**"""

latest_issue_date= bank['issue_date'].max()
latest_year= latest_issue_date.year
latest_month= latest_issue_date.month

mid_date= bank[(bank['issue_date'].dt.year == latest_year) & (bank['issue_date'].dt.month == latest_month)]

mid_total_funded_amount= mid_date['loan_amount'].sum()
mid_total_funded_amount_millions= mid_total_funded_amount/1000000
print(f"MID Total Funded amount (for {latest_issue_date.strftime('%B %Y')}): ${mid_total_funded_amount_millions:.2f}M")

"""**Total amount recevied**"""

total_amount_received= bank['total_payment'].sum()
total_amount_received_millions= total_amount_received/1000000
print(f"Total amount Received : ${total_amount_received_millions:.2f}M")

"""**MID Total amount Received**"""

latest_issue_date= bank['issue_date'].max()
latest_year= latest_issue_date.year
latest_month= latest_issue_date.month

mid_date= bank[(bank['issue_date'].dt.year == latest_year) & (bank['issue_date'].dt.month == latest_month)]

mid_total_amount_received= mid_date['total_payment'].sum()
mid_total_amount_received_millions= mid_total_amount_received/1000000
print(f"MID Total amount Received (for {latest_issue_date.strftime('%B %Y')}): ${mid_total_amount_received_millions:.2f}M")

"""**Average Interest Rate**"""

average_interest_rate= bank['int_rate'].mean()*100
print(f"Average Interest Rate : {average_interest_rate:.2f}%")

"""**Average Dept-to-Income Ratio (DTI)**"""

average_dti= bank['dti'].mean()*100
print(f"Average Dept-to-Income Ratio (DTI) : {average_dti:.2f}%")

"""**Good loan Metrics**"""

good_loans = bank[bank['loan_status'].isin(['Fully Paid', 'Current'])]
total_loan_application = bank['id'].count()

good_loan_application = good_loans['id'].count()
good_loan_funded_amount = good_loans['loan_amount'].sum()
good_loan_recevied_amount = good_loans['total_payment'].sum()

good_loan_funded_amount_millions = good_loan_funded_amount / 1000000
good_loan_recevied_amount_millions = good_loan_recevied_amount / 1000000

good_loan_percentage = (good_loan_application / total_loan_application) * 100

print('Good loan Application:',good_loan_application)
print('Good loan Funded Amount: ${:.2f}M'.format(good_loan_funded_amount_millions))
print('Good loan Received Amount: ${:.2f}M'.format(good_loan_recevied_amount_millions))
print(f'Percentage of Good Loan Application: {good_loan_percentage:.2f}%')

"""**Bad Loan**"""

Bad_loans = bank[bank['loan_status'].isin(['Charged Off'])]
Bad_loans_application = bank['id'].count()

Bad_loans_application = Bad_loans['id'].count()
Bad_loans_funded_amount = Bad_loans['loan_amount'].sum()
Bad_loans_recevied_amount = Bad_loans['total_payment'].sum()

Bad_loans_funded_amount_millions = Bad_loans_funded_amount / 1000000
Bad_loans_recevied_amount_millions = Bad_loans_recevied_amount / 1000000

Bad_loans_percentage = (Bad_loans_application / total_loan_application) * 100

print('Bad loans Application:',Bad_loans_application)
print('Bad loans Funded Amount: ${:.2f}M'.format(Bad_loans_funded_amount_millions))
print('Bad loans Received Amount: ${:.2f}M'.format(Bad_loans_recevied_amount_millions))
print(f'Percentage of Bad loans Application: {Bad_loans_percentage:.2f}%')

"""**Monthly Trends by Issue date for Total Funded Amount**"""

monthly_funded = bank.sort_values('issue_date').assign(month_name= lambda x: x['issue_date'].dt.strftime('%B %Y')).groupby('month_name',sort= False)['loan_amount'].sum().div(1000000).reset_index(name='loan_amount_millions')


plt.figure(figsize=(10,5))
plt.fill_between(monthly_funded['month_name'],monthly_funded['loan_amount_millions'],color='skyblue',alpha=0.5)
plt.plot(monthly_funded['month_name'],monthly_funded['loan_amount_millions'],marker='o',linestyle='-',color='blue',markersize=5,linewidth=2)

for i,row in monthly_funded.iterrows():
  plt.text(i, row['loan_amount_millions'] + 0.1,f"{row['loan_amount_millions']:.2f}",
           ha= 'center',va= 'bottom',fontsize=9,rotation=0,color='black')

plt.title("Total funded Amount by month",fontsize=14)
plt.xlabel('month')
plt.ylabel('funded Amount($ millions)')
plt.xticks(ticks=range(len(monthly_funded)),labels=monthly_funded['month_name'],rotation=45)
plt.grid(True,linestyle='--',alpha=0.6)
plt.tight_layout()
plt.show()

"""**Monthly Trends by Issue date for Total Amount Recevied**"""

monthly_received = bank.sort_values('issue_date').assign(month_name= lambda x: x['issue_date'].dt.strftime('%B %Y')).groupby('month_name',sort= False)['total_payment'].sum().div(1000000).reset_index(name='received_amount_millions')


plt.figure(figsize=(10,5))
plt.fill_between(monthly_received['month_name'],monthly_received['received_amount_millions'],color='lightgreen',alpha=0.5)
plt.plot(monthly_received['month_name'],monthly_received['received_amount_millions'],marker='o',linestyle='-',color='green',markersize=5,linewidth=2)

for i,row in monthly_received.iterrows():
  plt.text(i, row['received_amount_millions'] + 0.1,f"{row['received_amount_millions']:.2f}",
           ha= 'center',va= 'bottom',fontsize=9,rotation=0,color='black')

plt.title("Total recevied Amount by month",fontsize=14)
plt.xlabel('month')
plt.ylabel('received Amount($ millions)')
plt.xticks(ticks=range(len(monthly_received)),labels=monthly_received['month_name'],rotation=45)
plt.grid(True,linestyle='--',alpha=0.6)
plt.tight_layout()
plt.show()

"""**Monthly Trends by Issue date for Total Loan Application**"""

monthly_application = bank.sort_values('issue_date').assign(month_name= lambda x: x['issue_date'].dt.strftime('%B %Y')).groupby('month_name',sort= False)['id'].count().div(1000000).reset_index(name='loan_application_count')


plt.figure(figsize=(10,5))
plt.fill_between(monthly_application['month_name'],monthly_application['loan_application_count'],color='orange',alpha=0.5)
plt.plot(monthly_application['month_name'],monthly_application['loan_application_count'],marker='o',linestyle='-',color='darkorange',markersize=5,linewidth=2)

for i,row in monthly_application.iterrows():
  plt.text(i, row['loan_application_count'] + 0.5,f"{row['loan_application_count']:.2f}",
           ha= 'center',va= 'bottom',fontsize=9,rotation=0,color='black')

plt.title("Total Loan Application by month",fontsize=14)
plt.xlabel('month')
plt.ylabel('number of Application($ millions)')
plt.xticks(ticks=range(len(monthly_application)),labels=monthly_application['month_name'],rotation=45)
plt.grid(True,linestyle='--',alpha=0.6)
plt.tight_layout()
plt.show()

"""**Regional Analysis by State for Total Funded Amount**"""

state_funding = bank.groupby('address_state')['loan_amount'].sum().sort_values(ascending=True)
state_funding_thousends = state_funding / 1000

plt.figure(figsize=(10,10))
bars = plt.barh(state_funding_thousends.index, state_funding_thousends.values,color = 'red')

for bar in bars:
  width = bar.get_width()
  plt.text(width +10,bar.get_y() + bar.get_height()/ 2,
           f'{width:,.0f}k',va= 'center', fontsize=7)
plt.title('Total Funded Amount by State( in thousends)')
plt.xlabel('Funding (thousands)')
plt.ylabel('state')
plt.tight_layout()
plt.show()

"""**Loan Term Analysis by Total Funded Amount**"""

term_funding_millions = bank.groupby('term')['loan_amount'].sum().div(1000000)

plt.figure(figsize=(5,5))
plt.pie(term_funding_millions,labels= term_funding_millions.index,autopct = lambda p: f'{p:.1f}%\n${p*sum(term_funding_millions)/100:.1f}M',startangle=90,wedgeprops={"width":0.4})

plt.title('Loan Term Analysis by Total Funding Amount')
plt.gca().add_artist(plt.Circle((0,0),0.70,color='white'))
plt.axis('equal')
plt.tight_layout()
plt.show()

"""**Employee Length by Total Funded Amount**"""

emp_funding = bank.groupby('emp_length')['loan_amount'].sum().sort_values().div(1000)

plt.figure(figsize=(10,5))
bars= plt.barh(emp_funding.index, emp_funding.values,color='purple')

for bar in bars:
  width = bar.get_width()
  plt.text(width + 5,bar.get_y() + bar.get_height() / 2, f'{width:.0f}k',va='center',fontsize=7)

plt.title('Employee Length by Total Funded Amount')
plt.xlabel('Funding Amount (thousands)')
plt.ylabel('Employee Length')
plt.grid(axis='x', linestyle='--',alpha=0.5)
plt.tight_layout()
plt.show()

"""**Loan purpose by Total Funded Amount**"""

purpose_funding_millions = bank.groupby('purpose')['loan_amount'].sum().sort_values().div(1000000)

plt.figure(figsize=(10,5))
bars= plt.barh(purpose_funding_millions.index, purpose_funding_millions.values,color='yellow')

for bar in bars:
  width = bar.get_width()
  plt.text(width + 5,bar.get_y() + bar.get_height() / 2, f'{width:.0f}k',va='center',fontsize=7)

plt.title(' Total Funded Amount by purpose funding ($ millions)')
plt.xlabel('Funding Amount ($ millions)')
plt.ylabel('loan purpose')
plt.grid(axis='x', linestyle='--',alpha=0.5)
plt.tight_layout()
plt.show()

"""**Home ownership by Total Funded Amount**"""

home_funding = bank.groupby('home_ownership')['loan_amount'].sum().reset_index()
home_funding['loan_amount_millions'] = home_funding['loan_amount'] / 1000000

fig = px.treemap(home_funding,path=['home_ownership'],values= 'loan_amount_millions',color='loan_amount_millions',color_continuous_scale='Blues',title='Total funding amount by home ownership ($ millions)')
fig.show()